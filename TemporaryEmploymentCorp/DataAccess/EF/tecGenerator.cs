

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "TemporaryEmploymentCorp\App.config"
//     Connection String Name: "teCorpContext"
//     Connection String:      "Data Source=localhost\SQLEXPRESS;Initial Catalog=newTEC;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace TemporaryEmploymentCorp.DataAccess.EF
{
    using System.Linq;

    #region Unit of work

    public interface IteCorpContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Attendance> Attendances { get; set; } // Attendance
        System.Data.Entity.DbSet<Candidate> Candidates { get; set; } // Candidate
        System.Data.Entity.DbSet<CanQualify> CanQualifies { get; set; } // Can_Qualify
        System.Data.Entity.DbSet<Company> Companies { get; set; } // Company
        System.Data.Entity.DbSet<CompanyOpening> CompanyOpenings { get; set; } // CompanyOpening
        System.Data.Entity.DbSet<Course> Courses { get; set; } // Course
        System.Data.Entity.DbSet<Enrollment> Enrollments { get; set; } // Enrollment
        System.Data.Entity.DbSet<Fee> Fees { get; set; } // Fee
        System.Data.Entity.DbSet<History> Histories { get; set; } // History
        System.Data.Entity.DbSet<Opening> Openings { get; set; } // Opening
        System.Data.Entity.DbSet<Payment> Payments { get; set; } // Payment
        System.Data.Entity.DbSet<Placement> Placements { get; set; } // Placement
        System.Data.Entity.DbSet<Prerequisite> Prerequisites { get; set; } // Prerequisites
        System.Data.Entity.DbSet<Qualification> Qualifications { get; set; } // Qualification
        System.Data.Entity.DbSet<Session> Sessions { get; set; } // Session
        System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class teCorpContext : System.Data.Entity.DbContext, IteCorpContext
    {
        public System.Data.Entity.DbSet<Attendance> Attendances { get; set; } // Attendance
        public System.Data.Entity.DbSet<Candidate> Candidates { get; set; } // Candidate
        public System.Data.Entity.DbSet<CanQualify> CanQualifies { get; set; } // Can_Qualify
        public System.Data.Entity.DbSet<Company> Companies { get; set; } // Company
        public System.Data.Entity.DbSet<CompanyOpening> CompanyOpenings { get; set; } // CompanyOpening
        public System.Data.Entity.DbSet<Course> Courses { get; set; } // Course
        public System.Data.Entity.DbSet<Enrollment> Enrollments { get; set; } // Enrollment
        public System.Data.Entity.DbSet<Fee> Fees { get; set; } // Fee
        public System.Data.Entity.DbSet<History> Histories { get; set; } // History
        public System.Data.Entity.DbSet<Opening> Openings { get; set; } // Opening
        public System.Data.Entity.DbSet<Payment> Payments { get; set; } // Payment
        public System.Data.Entity.DbSet<Placement> Placements { get; set; } // Placement
        public System.Data.Entity.DbSet<Prerequisite> Prerequisites { get; set; } // Prerequisites
        public System.Data.Entity.DbSet<Qualification> Qualifications { get; set; } // Qualification
        public System.Data.Entity.DbSet<Session> Sessions { get; set; } // Session
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams

        static teCorpContext()
        {
            System.Data.Entity.Database.SetInitializer<teCorpContext>(null);
        }

        public teCorpContext()
            : base("Name=teCorpContext")
        {
        }

        public teCorpContext(string connectionString)
            : base(connectionString)
        {
        }

        public teCorpContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public teCorpContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public teCorpContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AttendanceConfiguration());
            modelBuilder.Configurations.Add(new CandidateConfiguration());
            modelBuilder.Configurations.Add(new CanQualifyConfiguration());
            modelBuilder.Configurations.Add(new CompanyConfiguration());
            modelBuilder.Configurations.Add(new CompanyOpeningConfiguration());
            modelBuilder.Configurations.Add(new CourseConfiguration());
            modelBuilder.Configurations.Add(new EnrollmentConfiguration());
            modelBuilder.Configurations.Add(new FeeConfiguration());
            modelBuilder.Configurations.Add(new HistoryConfiguration());
            modelBuilder.Configurations.Add(new OpeningConfiguration());
            modelBuilder.Configurations.Add(new PaymentConfiguration());
            modelBuilder.Configurations.Add(new PlacementConfiguration());
            modelBuilder.Configurations.Add(new PrerequisiteConfiguration());
            modelBuilder.Configurations.Add(new QualificationConfiguration());
            modelBuilder.Configurations.Add(new SessionConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AttendanceConfiguration(schema));
            modelBuilder.Configurations.Add(new CandidateConfiguration(schema));
            modelBuilder.Configurations.Add(new CanQualifyConfiguration(schema));
            modelBuilder.Configurations.Add(new CompanyConfiguration(schema));
            modelBuilder.Configurations.Add(new CompanyOpeningConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseConfiguration(schema));
            modelBuilder.Configurations.Add(new EnrollmentConfiguration(schema));
            modelBuilder.Configurations.Add(new FeeConfiguration(schema));
            modelBuilder.Configurations.Add(new HistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new OpeningConfiguration(schema));
            modelBuilder.Configurations.Add(new PaymentConfiguration(schema));
            modelBuilder.Configurations.Add(new PlacementConfiguration(schema));
            modelBuilder.Configurations.Add(new PrerequisiteConfiguration(schema));
            modelBuilder.Configurations.Add(new QualificationConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FaketeCorpContext : IteCorpContext
    {
        public System.Data.Entity.DbSet<Attendance> Attendances { get; set; }
        public System.Data.Entity.DbSet<Candidate> Candidates { get; set; }
        public System.Data.Entity.DbSet<CanQualify> CanQualifies { get; set; }
        public System.Data.Entity.DbSet<Company> Companies { get; set; }
        public System.Data.Entity.DbSet<CompanyOpening> CompanyOpenings { get; set; }
        public System.Data.Entity.DbSet<Course> Courses { get; set; }
        public System.Data.Entity.DbSet<Enrollment> Enrollments { get; set; }
        public System.Data.Entity.DbSet<Fee> Fees { get; set; }
        public System.Data.Entity.DbSet<History> Histories { get; set; }
        public System.Data.Entity.DbSet<Opening> Openings { get; set; }
        public System.Data.Entity.DbSet<Payment> Payments { get; set; }
        public System.Data.Entity.DbSet<Placement> Placements { get; set; }
        public System.Data.Entity.DbSet<Prerequisite> Prerequisites { get; set; }
        public System.Data.Entity.DbSet<Qualification> Qualifications { get; set; }
        public System.Data.Entity.DbSet<Session> Sessions { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }

        public FaketeCorpContext()
        {
            Attendances = new FakeDbSet<Attendance>("AttendanceId");
            Candidates = new FakeDbSet<Candidate>("CandidateId");
            CanQualifies = new FakeDbSet<CanQualify>("CanQualifyId");
            Companies = new FakeDbSet<Company>("CompanyId");
            CompanyOpenings = new FakeDbSet<CompanyOpening>("OpeningNumber", "CompanyId", "QualificationId");
            Courses = new FakeDbSet<Course>("CourseId");
            Enrollments = new FakeDbSet<Enrollment>("EnrollmentId");
            Fees = new FakeDbSet<Fee>("FeeId");
            Histories = new FakeDbSet<History>("HistoryId");
            Openings = new FakeDbSet<Opening>("OpeningNumber");
            Payments = new FakeDbSet<Payment>("Payment_");
            Placements = new FakeDbSet<Placement>("PlacementId");
            Prerequisites = new FakeDbSet<Prerequisite>("PrerequisitesId");
            Qualifications = new FakeDbSet<Qualification>("QualificationId");
            Sessions = new FakeDbSet<Session>("SessionId");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Attendance
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Attendance
    {
        public int AttendanceId { get; set; } // AttendanceID (Primary key)
        public int CandidateId { get; set; } // CandidateID
        public string SessionId { get; set; } // SessionID (length: 50)
        public bool? IsPresent { get; set; } // isPresent

        // Foreign keys
        public virtual Candidate Candidate { get; set; } // FK_Attendance_Candidate
        public virtual Session Session { get; set; } // FK_Attendance_Session
    }

    // Candidate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Candidate
    {
        public int CandidateId { get; set; } // CandidateID (Primary key)
        public string CandidateFirstName { get; set; } // CandidateFirstName (length: 50)
        public string CandidateLastName { get; set; } // CandidateLastName (length: 50)
        public string CandidateMiddleName { get; set; } // CandidateMiddleName (length: 50)
        public string CandidateAddress { get; set; } // CandidateAddress (length: 150)
        public string CandidatePhoneNo { get; set; } // CandidatePhoneNo (length: 50)
        public System.DateTime? CandidateBirthdate { get; set; } // CandidateBirthdate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Attendance> Attendances { get; set; } // Attendance.FK_Attendance_Candidate
        public virtual System.Collections.Generic.ICollection<CanQualify> CanQualifies { get; set; } // Can_Qualify.FK_Can_Qualify_Candidate
        public virtual System.Collections.Generic.ICollection<Enrollment> Enrollments { get; set; } // Enrollment.FK_Enrollment_Candidate
        public virtual System.Collections.Generic.ICollection<History> Histories { get; set; } // History.FK_History_Candidate
        public virtual System.Collections.Generic.ICollection<Payment> Payments { get; set; } // Payment.FK_Payment_Candidate
        public virtual System.Collections.Generic.ICollection<Placement> Placements { get; set; } // Placement.FK_Placement_Candidate

        public Candidate()
        {
            Attendances = new System.Collections.Generic.List<Attendance>();
            CanQualifies = new System.Collections.Generic.List<CanQualify>();
            Enrollments = new System.Collections.Generic.List<Enrollment>();
            Histories = new System.Collections.Generic.List<History>();
            Payments = new System.Collections.Generic.List<Payment>();
            Placements = new System.Collections.Generic.List<Placement>();
        }
    }

    // Can_Qualify
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CanQualify
    {
        public int CanQualifyId { get; set; } // CanQualifyID (Primary key)
        public int QualificationId { get; set; } // QualificationID
        public int CandidateId { get; set; } // CandidateID
        public bool IsAssigned { get; set; } // isAssigned
        public string OpeningNumber { get; set; } // OpeningNumber (length: 50)

        // Foreign keys
        public virtual Candidate Candidate { get; set; } // FK_Can_Qualify_Candidate
        public virtual Opening Opening { get; set; } // FK_Can_Qualify_Opening
        public virtual Qualification Qualification { get; set; } // FK_Can_Qualify_Qualification
    }

    // Company
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Company
    {
        public int CompanyId { get; set; } // CompanyID (Primary key)
        public string CompanyName { get; set; } // CompanyName (length: 50)
        public string CompanyAddress { get; set; } // CompanyAddress (length: 150)
        public string CompanyPhoneNo { get; set; } // CompanyPhoneNo (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Opening> Openings { get; set; } // Opening.FK_Opening_Company

        public Company()
        {
            Openings = new System.Collections.Generic.List<Opening>();
        }
    }

    // CompanyOpening
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CompanyOpening
    {
        public string CompanyName { get; set; } // CompanyName (length: 50)
        public string OpeningNumber { get; set; } // OpeningNumber (length: 50)
        public int CompanyId { get; set; } // CompanyID
        public int QualificationId { get; set; } // QualificationID
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public string HourlyPay { get; set; } // HourlyPay (length: 50)
        public bool? IsAssigned { get; set; } // isAssigned
    }

    // Course
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Course
    {
        public string CourseId { get; set; } // CourseID (Primary key) (length: 50)
        public string CourseName { get; set; } // CourseName (length: 50)
        public string CourseDescription { get; set; } // CourseDescription (length: 150)
        public int QualificationId { get; set; } // QualificationID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Prerequisite> Prerequisites { get; set; } // Prerequisites.FK_Prerequisites_Course
        public virtual System.Collections.Generic.ICollection<Session> Sessions { get; set; } // Session.FK_Session_Course

        // Foreign keys
        public virtual Qualification Qualification { get; set; } // FK_Course_Qualification

        public Course()
        {
            Prerequisites = new System.Collections.Generic.List<Prerequisite>();
            Sessions = new System.Collections.Generic.List<Session>();
        }
    }

    // Enrollment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Enrollment
    {
        public int EnrollmentId { get; set; } // EnrollmentID (Primary key)
        public int CandidateId { get; set; } // CandidateID
        public string SessionCode { get; set; } // SessionCode (length: 50)
        public string Balance { get; set; } // Balance (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Fee> Fees { get; set; } // Fee.FK_Fee_Enrollment

        // Foreign keys
        public virtual Candidate Candidate { get; set; } // FK_Enrollment_Candidate
        public virtual Session Session { get; set; } // FK_Enrollment_Session

        public Enrollment()
        {
            Fees = new System.Collections.Generic.List<Fee>();
        }
    }

    // Fee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Fee
    {
        public int FeeId { get; set; } // FeeID (Primary key)
        public string SessionId { get; set; } // SessionID (length: 50)
        public int EnrollmentId { get; set; } // EnrollmentID

        // Foreign keys
        public virtual Enrollment Enrollment { get; set; } // FK_Fee_Enrollment
        public virtual Session Session { get; set; } // FK_Fee_Session
    }

    // History
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class History
    {
        public int HistoryId { get; set; } // HistoryID (Primary key)
        public int CandidateId { get; set; } // CandidateID
        public int? PlacementId { get; set; } // PlacementID
        public string HistoryDescription { get; set; } // HistoryDescription (length: 50)
        public System.DateTime? DateStarted { get; set; } // DateStarted
        public System.DateTime? DateEnded { get; set; } // DateEnded

        // Foreign keys
        public virtual Candidate Candidate { get; set; } // FK_History_Candidate
        public virtual Placement Placement { get; set; } // FK_History_Placement
    }

    // Opening
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Opening
    {
        public string OpeningNumber { get; set; } // OpeningNumber (Primary key) (length: 50)
        public int CompanyId { get; set; } // CompanyID
        public int QualificationId { get; set; } // QualificationID
        public System.DateTime? StartDate { get; set; } // StartDate
        public System.DateTime? EndDate { get; set; } // EndDate
        public string HourlyPay { get; set; } // HourlyPay (length: 50)
        public bool? IsAssigned { get; set; } // isAssigned

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CanQualify> CanQualifies { get; set; } // Can_Qualify.FK_Can_Qualify_Opening
        public virtual System.Collections.Generic.ICollection<Placement> Placements { get; set; } // Placement.FK_Placement_Opening

        // Foreign keys
        public virtual Company Company { get; set; } // FK_Opening_Company
        public virtual Qualification Qualification { get; set; } // FK_Opening_Qualification

        public Opening()
        {
            CanQualifies = new System.Collections.Generic.List<CanQualify>();
            Placements = new System.Collections.Generic.List<Placement>();
        }
    }

    // Payment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Payment
    {
        public int Payment_ { get; set; } // Payment (Primary key)
        public string SessionId { get; set; } // SessionID (length: 50)
        public int? CandidateId { get; set; } // CandidateID
        public string Balance { get; set; } // Balance (length: 50)

        // Foreign keys
        public virtual Candidate Candidate { get; set; } // FK_Payment_Candidate
        public virtual Session Session { get; set; } // FK_Payment_Session
    }

    // Placement
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Placement
    {
        public int PlacementId { get; set; } // PlacementID (Primary key)
        public string OpeningNumber { get; set; } // OpeningNumber (length: 50)
        public int CandidateId { get; set; } // CandidateID
        public string TotalHoursWorked { get; set; } // TotalHoursWorked (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<History> Histories { get; set; } // History.FK_History_Placement

        // Foreign keys
        public virtual Candidate Candidate { get; set; } // FK_Placement_Candidate
        public virtual Opening Opening { get; set; } // FK_Placement_Opening

        public Placement()
        {
            Histories = new System.Collections.Generic.List<History>();
        }
    }

    // Prerequisites
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Prerequisite
    {
        public int PrerequisitesId { get; set; } // PrerequisitesID (Primary key)
        public string CourseId { get; set; } // CourseID (length: 50)
        public int QualificationId { get; set; } // QualificationID

        // Foreign keys
        public virtual Course Course { get; set; } // FK_Prerequisites_Course
        public virtual Qualification Qualification { get; set; } // FK_Prerequisites_Qualification
    }

    // Qualification
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Qualification
    {
        public string QualificationCode { get; set; } // QualificationCode (length: 50)
        public string QualificationDescription { get; set; } // QualificationDescription (length: 150)
        public int QualificationId { get; set; } // QualificationID (Primary key)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CanQualify> CanQualifies { get; set; } // Can_Qualify.FK_Can_Qualify_Qualification
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Course.FK_Course_Qualification
        public virtual System.Collections.Generic.ICollection<Opening> Openings { get; set; } // Opening.FK_Opening_Qualification
        public virtual System.Collections.Generic.ICollection<Prerequisite> Prerequisites { get; set; } // Prerequisites.FK_Prerequisites_Qualification

        public Qualification()
        {
            CanQualifies = new System.Collections.Generic.List<CanQualify>();
            Courses = new System.Collections.Generic.List<Course>();
            Openings = new System.Collections.Generic.List<Opening>();
            Prerequisites = new System.Collections.Generic.List<Prerequisite>();
        }
    }

    // Session
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Session
    {
        public string SessionId { get; set; } // SessionID (Primary key) (length: 50)
        public string CourseId { get; set; } // CourseID (length: 50)
        public string SessionLocation { get; set; } // SessionLocation (length: 50)
        public System.DateTime? SessionTime { get; set; } // SessionTime
        public string Fee { get; set; } // Fee (length: 50)
        public System.DateTime? SessionDate { get; set; } // SessionDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Attendance> Attendances { get; set; } // Attendance.FK_Attendance_Session
        public virtual System.Collections.Generic.ICollection<Enrollment> Enrollments { get; set; } // Enrollment.FK_Enrollment_Session
        public virtual System.Collections.Generic.ICollection<Fee> Fees { get; set; } // Fee.FK_Fee_Session
        public virtual System.Collections.Generic.ICollection<Payment> Payments { get; set; } // Payment.FK_Payment_Session

        // Foreign keys
        public virtual Course Course { get; set; } // FK_Session_Course

        public Session()
        {
            Attendances = new System.Collections.Generic.List<Attendance>();
            Enrollments = new System.Collections.Generic.List<Enrollment>();
            Fees = new System.Collections.Generic.List<Fee>();
            Payments = new System.Collections.Generic.List<Payment>();
        }
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sysdiagram
    {
        public string Name { get; set; } // name (length: 128)
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }

    #endregion

    #region POCO Configuration

    // Attendance
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AttendanceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Attendance>
    {
        public AttendanceConfiguration()
            : this("dbo")
        {
        }

        public AttendanceConfiguration(string schema)
        {
            ToTable("Attendance", schema);
            HasKey(x => x.AttendanceId);

            Property(x => x.AttendanceId).HasColumnName(@"AttendanceID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CandidateId).HasColumnName(@"CandidateID").IsRequired().HasColumnType("int");
            Property(x => x.SessionId).HasColumnName(@"SessionID").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.IsPresent).HasColumnName(@"isPresent").IsOptional().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.Candidate).WithMany(b => b.Attendances).HasForeignKey(c => c.CandidateId).WillCascadeOnDelete(false); // FK_Attendance_Candidate
            HasRequired(a => a.Session).WithMany(b => b.Attendances).HasForeignKey(c => c.SessionId).WillCascadeOnDelete(false); // FK_Attendance_Session
        }
    }

    // Candidate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CandidateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Candidate>
    {
        public CandidateConfiguration()
            : this("dbo")
        {
        }

        public CandidateConfiguration(string schema)
        {
            ToTable("Candidate", schema);
            HasKey(x => x.CandidateId);

            Property(x => x.CandidateId).HasColumnName(@"CandidateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CandidateFirstName).HasColumnName(@"CandidateFirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CandidateLastName).HasColumnName(@"CandidateLastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CandidateMiddleName).HasColumnName(@"CandidateMiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CandidateAddress).HasColumnName(@"CandidateAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(150);
            Property(x => x.CandidatePhoneNo).HasColumnName(@"CandidatePhoneNo").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CandidateBirthdate).HasColumnName(@"CandidateBirthdate").IsOptional().HasColumnType("date");
        }
    }

    // Can_Qualify
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CanQualifyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CanQualify>
    {
        public CanQualifyConfiguration()
            : this("dbo")
        {
        }

        public CanQualifyConfiguration(string schema)
        {
            ToTable("Can_Qualify", schema);
            HasKey(x => x.CanQualifyId);

            Property(x => x.CanQualifyId).HasColumnName(@"CanQualifyID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.QualificationId).HasColumnName(@"QualificationID").IsRequired().HasColumnType("int");
            Property(x => x.CandidateId).HasColumnName(@"CandidateID").IsRequired().HasColumnType("int");
            Property(x => x.IsAssigned).HasColumnName(@"isAssigned").IsRequired().HasColumnType("bit");
            Property(x => x.OpeningNumber).HasColumnName(@"OpeningNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.Opening).WithMany(b => b.CanQualifies).HasForeignKey(c => c.OpeningNumber).WillCascadeOnDelete(false); // FK_Can_Qualify_Opening
            HasRequired(a => a.Candidate).WithMany(b => b.CanQualifies).HasForeignKey(c => c.CandidateId).WillCascadeOnDelete(false); // FK_Can_Qualify_Candidate
            HasRequired(a => a.Qualification).WithMany(b => b.CanQualifies).HasForeignKey(c => c.QualificationId).WillCascadeOnDelete(false); // FK_Can_Qualify_Qualification
        }
    }

    // Company
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CompanyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Company>
    {
        public CompanyConfiguration()
            : this("dbo")
        {
        }

        public CompanyConfiguration(string schema)
        {
            ToTable("Company", schema);
            HasKey(x => x.CompanyId);

            Property(x => x.CompanyId).HasColumnName(@"CompanyID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CompanyAddress).HasColumnName(@"CompanyAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(150);
            Property(x => x.CompanyPhoneNo).HasColumnName(@"CompanyPhoneNo").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // CompanyOpening
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CompanyOpeningConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CompanyOpening>
    {
        public CompanyOpeningConfiguration()
            : this("dbo")
        {
        }

        public CompanyOpeningConfiguration(string schema)
        {
            ToTable("CompanyOpening", schema);
            HasKey(x => new { x.OpeningNumber, x.CompanyId, x.QualificationId });

            Property(x => x.CompanyName).HasColumnName(@"CompanyName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.OpeningNumber).HasColumnName(@"OpeningNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CompanyId).HasColumnName(@"CompanyID").IsRequired().HasColumnType("int");
            Property(x => x.QualificationId).HasColumnName(@"QualificationID").IsRequired().HasColumnType("int");
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsOptional().HasColumnType("date");
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("date");
            Property(x => x.HourlyPay).HasColumnName(@"HourlyPay").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.IsAssigned).HasColumnName(@"isAssigned").IsOptional().HasColumnType("bit");
        }
    }

    // Course
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CourseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Course>
    {
        public CourseConfiguration()
            : this("dbo")
        {
        }

        public CourseConfiguration(string schema)
        {
            ToTable("Course", schema);
            HasKey(x => x.CourseId);

            Property(x => x.CourseId).HasColumnName(@"CourseID").IsRequired().HasColumnType("nvarchar").HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseName).HasColumnName(@"CourseName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CourseDescription).HasColumnName(@"CourseDescription").IsOptional().HasColumnType("nvarchar").HasMaxLength(150);
            Property(x => x.QualificationId).HasColumnName(@"QualificationID").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Qualification).WithMany(b => b.Courses).HasForeignKey(c => c.QualificationId).WillCascadeOnDelete(false); // FK_Course_Qualification
        }
    }

    // Enrollment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class EnrollmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Enrollment>
    {
        public EnrollmentConfiguration()
            : this("dbo")
        {
        }

        public EnrollmentConfiguration(string schema)
        {
            ToTable("Enrollment", schema);
            HasKey(x => x.EnrollmentId);

            Property(x => x.EnrollmentId).HasColumnName(@"EnrollmentID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CandidateId).HasColumnName(@"CandidateID").IsRequired().HasColumnType("int");
            Property(x => x.SessionCode).HasColumnName(@"SessionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Balance).HasColumnName(@"Balance").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasRequired(a => a.Candidate).WithMany(b => b.Enrollments).HasForeignKey(c => c.CandidateId).WillCascadeOnDelete(false); // FK_Enrollment_Candidate
            HasRequired(a => a.Session).WithMany(b => b.Enrollments).HasForeignKey(c => c.SessionCode).WillCascadeOnDelete(false); // FK_Enrollment_Session
        }
    }

    // Fee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Fee>
    {
        public FeeConfiguration()
            : this("dbo")
        {
        }

        public FeeConfiguration(string schema)
        {
            ToTable("Fee", schema);
            HasKey(x => x.FeeId);

            Property(x => x.FeeId).HasColumnName(@"FeeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionId).HasColumnName(@"SessionID").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EnrollmentId).HasColumnName(@"EnrollmentID").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Enrollment).WithMany(b => b.Fees).HasForeignKey(c => c.EnrollmentId).WillCascadeOnDelete(false); // FK_Fee_Enrollment
            HasRequired(a => a.Session).WithMany(b => b.Fees).HasForeignKey(c => c.SessionId).WillCascadeOnDelete(false); // FK_Fee_Session
        }
    }

    // History
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<History>
    {
        public HistoryConfiguration()
            : this("dbo")
        {
        }

        public HistoryConfiguration(string schema)
        {
            ToTable("History", schema);
            HasKey(x => x.HistoryId);

            Property(x => x.HistoryId).HasColumnName(@"HistoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CandidateId).HasColumnName(@"CandidateID").IsRequired().HasColumnType("int");
            Property(x => x.PlacementId).HasColumnName(@"PlacementID").IsOptional().HasColumnType("int");
            Property(x => x.HistoryDescription).HasColumnName(@"HistoryDescription").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.DateStarted).HasColumnName(@"DateStarted").IsOptional().HasColumnType("date");
            Property(x => x.DateEnded).HasColumnName(@"DateEnded").IsOptional().HasColumnType("date");

            // Foreign keys
            HasOptional(a => a.Placement).WithMany(b => b.Histories).HasForeignKey(c => c.PlacementId).WillCascadeOnDelete(false); // FK_History_Placement
            HasRequired(a => a.Candidate).WithMany(b => b.Histories).HasForeignKey(c => c.CandidateId).WillCascadeOnDelete(false); // FK_History_Candidate
        }
    }

    // Opening
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class OpeningConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Opening>
    {
        public OpeningConfiguration()
            : this("dbo")
        {
        }

        public OpeningConfiguration(string schema)
        {
            ToTable("Opening", schema);
            HasKey(x => x.OpeningNumber);

            Property(x => x.OpeningNumber).HasColumnName(@"OpeningNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompanyId).HasColumnName(@"CompanyID").IsRequired().HasColumnType("int");
            Property(x => x.QualificationId).HasColumnName(@"QualificationID").IsRequired().HasColumnType("int");
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsOptional().HasColumnType("date");
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("date");
            Property(x => x.HourlyPay).HasColumnName(@"HourlyPay").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.IsAssigned).HasColumnName(@"isAssigned").IsOptional().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.Company).WithMany(b => b.Openings).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_Opening_Company
            HasRequired(a => a.Qualification).WithMany(b => b.Openings).HasForeignKey(c => c.QualificationId).WillCascadeOnDelete(false); // FK_Opening_Qualification
        }
    }

    // Payment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PaymentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Payment>
    {
        public PaymentConfiguration()
            : this("dbo")
        {
        }

        public PaymentConfiguration(string schema)
        {
            ToTable("Payment", schema);
            HasKey(x => x.Payment_);

            Property(x => x.Payment_).HasColumnName(@"Payment").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SessionId).HasColumnName(@"SessionID").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CandidateId).HasColumnName(@"CandidateID").IsOptional().HasColumnType("int");
            Property(x => x.Balance).HasColumnName(@"Balance").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.Candidate).WithMany(b => b.Payments).HasForeignKey(c => c.CandidateId).WillCascadeOnDelete(false); // FK_Payment_Candidate
            HasOptional(a => a.Session).WithMany(b => b.Payments).HasForeignKey(c => c.SessionId).WillCascadeOnDelete(false); // FK_Payment_Session
        }
    }

    // Placement
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PlacementConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Placement>
    {
        public PlacementConfiguration()
            : this("dbo")
        {
        }

        public PlacementConfiguration(string schema)
        {
            ToTable("Placement", schema);
            HasKey(x => x.PlacementId);

            Property(x => x.PlacementId).HasColumnName(@"PlacementID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.OpeningNumber).HasColumnName(@"OpeningNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CandidateId).HasColumnName(@"CandidateID").IsRequired().HasColumnType("int");
            Property(x => x.TotalHoursWorked).HasColumnName(@"TotalHoursWorked").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasRequired(a => a.Candidate).WithMany(b => b.Placements).HasForeignKey(c => c.CandidateId).WillCascadeOnDelete(false); // FK_Placement_Candidate
            HasRequired(a => a.Opening).WithMany(b => b.Placements).HasForeignKey(c => c.OpeningNumber).WillCascadeOnDelete(false); // FK_Placement_Opening
        }
    }

    // Prerequisites
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PrerequisiteConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Prerequisite>
    {
        public PrerequisiteConfiguration()
            : this("dbo")
        {
        }

        public PrerequisiteConfiguration(string schema)
        {
            ToTable("Prerequisites", schema);
            HasKey(x => x.PrerequisitesId);

            Property(x => x.PrerequisitesId).HasColumnName(@"PrerequisitesID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CourseId).HasColumnName(@"CourseID").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.QualificationId).HasColumnName(@"QualificationID").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.Prerequisites).HasForeignKey(c => c.CourseId).WillCascadeOnDelete(false); // FK_Prerequisites_Course
            HasRequired(a => a.Qualification).WithMany(b => b.Prerequisites).HasForeignKey(c => c.QualificationId).WillCascadeOnDelete(false); // FK_Prerequisites_Qualification
        }
    }

    // Qualification
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class QualificationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Qualification>
    {
        public QualificationConfiguration()
            : this("dbo")
        {
        }

        public QualificationConfiguration(string schema)
        {
            ToTable("Qualification", schema);
            HasKey(x => x.QualificationId);

            Property(x => x.QualificationCode).HasColumnName(@"QualificationCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.QualificationDescription).HasColumnName(@"QualificationDescription").IsOptional().HasColumnType("nvarchar").HasMaxLength(150);
            Property(x => x.QualificationId).HasColumnName(@"QualificationID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
        }
    }

    // Session
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SessionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Session>
    {
        public SessionConfiguration()
            : this("dbo")
        {
        }

        public SessionConfiguration(string schema)
        {
            ToTable("Session", schema);
            HasKey(x => x.SessionId);

            Property(x => x.SessionId).HasColumnName(@"SessionID").IsRequired().HasColumnType("nvarchar").HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseId).HasColumnName(@"CourseID").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SessionLocation).HasColumnName(@"SessionLocation").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SessionTime).HasColumnName(@"SessionTime").IsOptional().HasColumnType("datetime2");
            Property(x => x.Fee).HasColumnName(@"Fee").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SessionDate).HasColumnName(@"SessionDate").IsOptional().HasColumnType("date");

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.Sessions).HasForeignKey(c => c.CourseId).WillCascadeOnDelete(false); // FK_Session_Course
        }
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SysdiagramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }

        public SysdiagramConfiguration(string schema)
        {
            ToTable("sysdiagrams", schema);
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName(@"principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName(@"diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName(@"definition").IsOptional().HasColumnType("varbinary");
        }
    }

    #endregion

}
// </auto-generated>

